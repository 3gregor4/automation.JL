name: 🚀 Automated Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

env:
  JULIA_VERSION: '1.9'

jobs:
  # =============================================================================
  # PRE-RELEASE QUALITY VALIDATION
  # =============================================================================
  validate:
    name: 🔍 Pre-Release Validation
    runs-on: ubuntu-latest

    outputs:
      csga-score: ${{ steps.quality.outputs.csga-score }}
      green-score: ${{ steps.quality.outputs.green-score }}

    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: 🏗️ Setup Julia
      uses: julia-actions/setup-julia@v1
      with:
        version: ${{ env.JULIA_VERSION }}

    - name: 📦 Install Dependencies
      run: |
        julia --project=. -e 'using Pkg; Pkg.instantiate()'

    - name: 🧪 Run Full Test Suite
      run: |
        julia --project=. -e 'using Pkg; Pkg.test()'

    - name: 🎯 Quality Assessment
      id: quality
      run: |
        julia --project=. -e '
          using Automation

          println("🎯 Pre-release CSGA Quality Assessment")
          println("=" ^ 45)

          result = evaluate_project(".")

          println("🏆 Overall Score: $(round(result.overall_score, digits=1))/100")
          println("📈 Maturity Level: $(result.maturity_level)")

          # Set outputs
          println("::set-output name=csga-score::$(result.overall_score)")

          # Quality gate for release
          if result.overall_score < 90.0
            println("❌ RELEASE BLOCKED: CSGA score $(round(result.overall_score, digits=1)) < 90.0")
            println("💡 Releases require Expert level (90+) quality")
            exit(1)
          end

          # Green Code assessment
          include("src/green_code_integration.jl")
          green_result = green_code_showcase()
          green_score = get(green_result, "green_code_score", 0.0)

          println("🌱 Green Code Score: $(round(green_score, digits=1))/100")
          println("::set-output name=green-score::$(green_score)")

          if green_score < 95.0
            println("⚠️  Release warning: Green Code score $(round(green_score, digits=1)) < 95.0")
          end

          println("✅ Quality validation passed - Ready for release")
        '

  # =============================================================================
  # BUILD RELEASE ARTIFACTS
  # =============================================================================
  build:
    name: 🏗️ Build Release Artifacts
    runs-on: ubuntu-latest
    needs: validate

    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: 🏗️ Setup Julia
      uses: julia-actions/setup-julia@v1
      with:
        version: ${{ env.JULIA_VERSION }}

    - name: 📦 Install Dependencies
      run: |
        julia --project=. -e 'using Pkg; Pkg.instantiate()'

    - name: 📊 Generate Release Report
      run: |
        julia --project=. -e '
          using Automation
          using Printf
          using Dates

          # Generate comprehensive release report
          report = """
          # 🚀 Automation.jl Release Report

          **Release Date:** $(now())
          **Version:** ${{ github.ref_name }}
          **CSGA Score:** ${{ needs.validate.outputs.csga-score }}/100
          **Green Code Score:** ${{ needs.validate.outputs.green-score }}/100

          ## 📊 Quality Metrics

          """

          # CSGA evaluation
          result = evaluate_project(".")

          report *= """
          ### 🎯 CSGA Assessment
          - **Overall Score:** $(round(result.overall_score, digits=1))/100
          - **Security Pillar:** $(round(result.security_pillar.score, digits=1))/100
          - **Clean Code Pillar:** $(round(result.clean_code_pillar.score, digits=1))/100
          - **Green Code Pillar:** $(round(result.green_code_pillar.score, digits=1))/100
          - **Automation Pillar:** $(round(result.automation_pillar.score, digits=1))/100
          - **Maturity Level:** $(result.maturity_level)

          """

          # Project statistics
          jl_files = [f for f in readdir(".", join=true) if endswith(f, ".jl")]
          total_files = length(jl_files)

          report *= """
          ### 📁 Project Statistics
          - **Julia Files:** $(total_files)
          - **Test Coverage:** Run `make coverage` for details
          - **Documentation:** Available at GitHub Pages

          """

          # Green Code details
          include("src/green_code_integration.jl")
          green_result = green_code_showcase()

          report *= """
          ### 🌱 Green Code Metrics
          """

          for (key, value) in green_result
            formatted_key = replace(key, "_" => " ") |> titlecase
            report *= "- **$(formatted_key):** $(round(value, digits=1))\n"
          end

          report *= """

          ## 🚀 Release Features

          - ✅ Expert-level CSGA quality (90+/100)
          - ✅ Comprehensive test suite
          - ✅ Advanced memory optimization
          - ✅ CPU efficiency optimizations
          - ✅ Automated quality gates
          - ✅ Continuous monitoring
          - ✅ GitHub Actions CI/CD

          ## 📚 Documentation

          - [API Documentation](https://username.github.io/Automation.jl/)
          - [Getting Started Guide](README.md)
          - [Quality Dashboard](quality_monitoring_report.md)

          ## 🔧 Installation

          ```julia
          using Pkg
          Pkg.add("Automation")
          ```

          ## 🙏 Acknowledgments

          This release represents a systematic approach to software quality
          following CSGA (Clean, Secure, Green, Automated) principles.

          ---
          *Generated automatically by Automation.jl CI/CD pipeline*
          """

          # Write report to file
          write("RELEASE_REPORT.md", report)

          println("📊 Release report generated successfully")
        '

    - name: 🎯 Create Quality Badge
      run: |
        # Generate quality badge data
        julia --project=. -e '
          using Automation
          result = evaluate_project(".")

          score = round(result.overall_score, digits=1)
          level = result.maturity_level

          # Determine badge color
          if score >= 90
            color = "brightgreen"
          elseif score >= 80
            color = "green"
          elseif score >= 70
            color = "yellow"
          else
            color = "red"
          end

          badge_url = "https://img.shields.io/badge/CSGA-$(score)%25%20$(level)-$(color)"

          println("Quality Badge URL: $(badge_url)")

          # Save for use in release notes
          write("quality_badge.txt", badge_url)
        '

    - name: 📤 Upload Artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-artifacts
        path: |
          RELEASE_REPORT.md
          quality_badge.txt

  # =============================================================================
  # CREATE GITHUB RELEASE
  # =============================================================================
  release:
    name: 🎉 Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, build]

    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: 📥 Download Artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-artifacts

    - name: 📋 Prepare Release Notes
      id: release-notes
      run: |
        # Combine release report with changelog
        echo "## 🚀 Release Notes" > release_notes.md
        echo "" >> release_notes.md

        # Add quality badge
        if [ -f quality_badge.txt ]; then
          echo "![Quality]($(cat quality_badge.txt))" >> release_notes.md
          echo "" >> release_notes.md
        fi

        # Add release report
        if [ -f RELEASE_REPORT.md ]; then
          cat RELEASE_REPORT.md >> release_notes.md
        fi

        echo "📋 Release notes prepared"

    - name: 🎉 Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: 'Automation.jl ${{ github.ref_name }}'
        body_path: release_notes.md
        draft: false
        prerelease: false

  # =============================================================================
  # POST-RELEASE TASKS
  # =============================================================================
  post-release:
    name: 📢 Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [release]

    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: 🏗️ Setup Julia
      uses: julia-actions/setup-julia@v1
      with:
        version: ${{ env.JULIA_VERSION }}

    - name: 📦 Install Dependencies
      run: |
        julia --project=. -e 'using Pkg; Pkg.instantiate()'

    - name: 📊 Update Quality Dashboard
      run: |
        julia --project=. -e '
          # Update quality dashboard with release information
          include("quality/quality_dashboard_advanced.jl")

          dashboard = setup_monitoring(".")
          report = generate_continuous_report(dashboard)

          println("📊 Quality dashboard updated for release ${{ github.ref_name }}")
        '

    - name: 🎯 Archive Quality Metrics
      run: |
        # Archive quality metrics for this release
        mkdir -p releases/${{ github.ref_name }}

        julia --project=. -e '
          using Automation
          using JSON3

          result = evaluate_project(".")

          metrics = Dict(
            "version" => "${{ github.ref_name }}",
            "timestamp" => string(now()),
            "csga_score" => result.overall_score,
            "security_score" => result.security_pillar.score,
            "clean_code_score" => result.clean_code_pillar.score,
            "green_code_score" => result.green_code_pillar.score,
            "automation_score" => result.automation_pillar.score,
            "maturity_level" => result.maturity_level
          )

          JSON3.write("releases/${{ github.ref_name }}/quality_metrics.json", metrics)

          println("📊 Quality metrics archived for ${{ github.ref_name }}")
        '

    - name: 🎉 Release Summary
      run: |
        echo "🎉 Release ${{ github.ref_name }} completed successfully!"
        echo "📊 CSGA Score: ${{ needs.validate.outputs.csga-score }}/100"
        echo "🌱 Green Code Score: ${{ needs.validate.outputs.green-score }}/100"
        echo "🚀 Ready for distribution!"
