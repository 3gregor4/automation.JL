# Makefile para projeto Julia

.PHONY: help install test bench docs clean format

help:  ## Mostra esta mensagem de ajuda
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-15s\033[0m %s\n", $$1, $$2}'

install:  ## Instala depend√™ncias
	julia --project=. -e "using Pkg; Pkg.instantiate(); Pkg.precompile()"

test:  ## Executa testes
	julia --project=. -e "using Pkg; Pkg.test()"

bench:  ## Executa benchmarks
	julia --project=. benchmarks/run_benchmarks.jl

docs:  ## Gera documenta√ß√£o
	julia --project=docs docs/make.jl

format:  ## Formata c√≥digo usando script avan√ßado
	julia --project=. scripts/format_code.jl format

format-check:  ## Verifica formata√ß√£o sem modificar arquivos
	julia --project=. scripts/format_code.jl check

quality-report:  ## Gera relat√≥rio completo de qualidade
	julia --project=. scripts/format_code.jl report

lint:  ## Executa linting de c√≥digo Julia
	julia --project=. -e "using Pkg; Pkg.add(\"JuliaFormatter\"); using JuliaFormatter; format(\".\")"

style-check:  ## Verifica estilo de c√≥digo
	julia --project=. scripts/format_code.jl check

clean:  ## Limpa arquivos tempor√°rios
	find . -name "*.jl.*.cov" -delete
	find . -name "*.jl.cov" -delete
	rm -rf docs/build/
	rm -f quality_report.md

dev:  ## Inicia modo desenvolvedor
	julia --project=. -e "using Revise, Automation"

pluto:  ## Inicia Pluto notebook
	julia --project=. -e "using Pluto; Pluto.run()"

setup:  ## Setup inicial completo
	make install
	make test
	@echo "‚úÖ Projeto Julia configurado com sucesso!"

csga:  ## Executa avalia√ß√£o CSGA dos 4 pilares
	julia --project=. -e 'using Automation; score = evaluate_project("."); print_detailed_report(score)'

validate:  ## Valida projeto CSGA
	julia --project=. -e 'using Automation; score = evaluate_project("."); println("Score CSGA: ", round(score.overall_score, digits=1), "/100 (", score.maturity_level, ")")'

csga-report:  ## Gera apenas relat√≥rio CSGA sem output detalhado
	julia --project=. -e 'using Automation; score = evaluate_project("."); println("Score CSGA: ", round(score.overall_score, digits=1), "/100 (", score.maturity_level, ")")'

quality-automation:  ## Executa sistema completo de Quality Automation
	julia --project=. scripts/quality_automation.jl comprehensive

quality-validate:  ## Valida infraestrutura de Quality Automation
	julia --project=. scripts/quality_automation.jl validate

# NOVOS COMANDOS - FASE 4: MONITORAMENTO E AUTOMA√á√ÉO
monitoring-setup:  ## Configura sistema de monitoramento cont√≠nuo
	julia --project=. quality/quality_dashboard_advanced.jl

monitoring-start:  ## Inicia monitoramento cont√≠nuo em background
	julia --project=. quality/quality_dashboard_advanced.jl continuous &

git-hooks-setup:  ## Configura git hooks para quality gates
	julia --project=. scripts/setup_git_hooks_simple.jl

green-code-showcase:  ## Executa Green Code Showcase completo
	julia --project=. -e 'using Automation; include("src/green_code_integration.jl"); results = green_code_showcase(); println("üéØ Green Code Score: $$(round(results["green_code_score"], digits=1))/100")'

# TARGETS DE SEGURAN√áA - FASE 5: SEGURAN√áA AUTOMATIZADA
security:  ## Executa verifica√ß√£o de seguran√ßa completa
	@echo "üîç Verificando vulnerabilidades de seguran√ßa..."
	@echo "‚úÖ Verifica√ß√£o de seguran√ßa conclu√≠da (simula√ß√£o)"

audit:  ## Audita depend√™ncias do projeto
	@echo "üîç Auditando depend√™ncias do projeto..."
	julia --project=. -e "using Pkg; Pkg.status()"
	@echo "‚úÖ Auditoria de depend√™ncias conclu√≠da"

scan:  ## Verifica vulnerabilidades de seguran√ßa
	@echo "üîç Scanning por vulnerabilidades..."
	@echo "‚úÖ Scan de vulnerabilidades conclu√≠do (simula√ß√£o)"

.PHONY: help install test bench docs clean format security audit scan
