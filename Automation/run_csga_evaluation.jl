#!/usr/bin/env julia

"""
Script de demonstra√ß√£o do Sistema CSGA
Executa avalia√ß√£o completa do projeto Automation
"""

# Adicionar o diret√≥rio src ao load path
push!(LOAD_PATH, joinpath(@__DIR__, "src"))

# Corrigir importa√ß√£o do m√≥dulo
using Automation

function main()
    println("üöÄ INICIANDO AVALIA√á√ÉO CSGA DO PROJETO AUTOMATION")
    println("="^60)

    # Caminho do projeto atual
    project_path = @__DIR__

    # Verificar se o diret√≥rio do projeto existe
    if !isdir(project_path)
        println("‚ùå Diret√≥rio do projeto n√£o encontrado: $project_path")
        return 1
    end

    try
        # Executar avalia√ß√£o completa
        println("üìä Executando avalia√ß√£o dos 4 pilares...")
        csga_score = evaluate_project(project_path)

        # Exibir relat√≥rio detalhado
        print_detailed_report(csga_score)

        # Gerar relat√≥rio em JSON
        json_report = generate_report(csga_score, :json)
        json_file = joinpath(project_path, "csga_report.json")
        open(json_file, "w") do f
            write(f, json_report)
        end
        println("\nüìÑ Relat√≥rio JSON salvo em: $json_file")

        # Gerar relat√≥rio em Markdown
        md_report = generate_report(csga_score, :markup)
        md_file = joinpath(project_path, "CSGA_REPORT.md")
        open(md_file, "w") do f
            write(f, md_report)
        end
        println("üìÑ Relat√≥rio Markdown salvo em: $md_file")

        # Resumo executivo
        println("\nüéØ RESUMO EXECUTIVO:")
        println("Score Geral: $(round(csga_score.overall_score, digits=1))/100")
        println("N√≠vel: $(csga_score.maturity_level)")
        println("Status: $(csga_score.compliance_status)")

        # Recomenda√ß√µes priorit√°rias
        all_recommendations = vcat(
            csga_score.security_pillar.recommendations,
            csga_score.clean_code_pillar.recommendations,
            csga_score.green_code_pillar.recommendations,
            csga_score.automation_pillar.recommendations,
        )

        if !isempty(all_recommendations)
            println("\nüí° PR√ìXIMOS PASSOS:")
            for (i, rec) in enumerate(unique(all_recommendations)[1:min(3, end)])
                println("  $(i). $rec")
            end
        end

        println("\n‚úÖ Avalia√ß√£o CSGA conclu√≠da com sucesso!")

    catch e
        println("‚ùå Erro durante a avalia√ß√£o:")
        println(e)
        return 1
    end

    return 0
end

# Executar se este arquivo for chamado diretamente
if abspath(PROGRAM_FILE) == @__FILE__
    exit(main())
end
