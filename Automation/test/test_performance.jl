"""
Performance Tests - Valida√ß√£o de Performance CSGA
Testes espec√≠ficos de performance para o pilar Green Code

Objetivos:
- Validar performance das fun√ß√µes CSGA
- Benchmarks de avalia√ß√£o dos pilares
- Testes de efici√™ncia do sistema
"""

using Test
using BenchmarkTools
using Automation

@testset "üöÄ Performance Tests" begin
    println("\n‚ö° Executando Performance Tests...")

    @testset "CSGA Evaluation Performance" begin
        # Benchmark da avalia√ß√£o CSGA completa
        result = @benchmark Automation.evaluate_project(".")

        median_time = median(result.times) / 1e9  # Converter para segundos
        @test median_time <= 10.0 "Avalia√ß√£o CSGA deve completar em ‚â§ 10 segundos"

        println("   ‚è±Ô∏è  Tempo m√©dio avalia√ß√£o CSGA: $(round(median_time, digits=3))s")

        # Verificar mem√≥ria alocada
        median_memory = median(result.memory)
        @test median_memory <= 200_000_000 "Avalia√ß√£o CSGA deve usar ‚â§ 200MB"

        println("   üíæ Mem√≥ria m√©dia: $(round(median_memory/1e6, digits=1))MB")
    end

    @testset "Individual Pillar Performance" begin
        # Benchmark das fun√ß√µes de scoring individual
        pillars = [
            ("Security", () -> Automation.CSGAScoring.evaluate_security_pillar(".")),
            ("Clean Code", () -> Automation.CSGAScoring.evaluate_clean_code_pillar(".")),
            ("Green Code", () -> Automation.CSGAScoring.evaluate_green_code_pillar(".")),
            ("Automation", () -> Automation.CSGAScoring.evaluate_automation_pillar(".")),
        ]

        for (name, func) in pillars
            result = @benchmark $func()
            median_time = median(result.times) / 1e9

            @test median_time <= 5.0 "Avalia√ß√£o do pilar $name deve completar em ‚â§ 5 segundos"

            println("   ‚è±Ô∏è  $name pillar: $(round(median_time, digits=3))s")
        end
    end

    println("‚úÖ Performance Tests completed!")
end
